from event import Event


def calculateSPR(player: dict):
    """
    Calculate the SPR of a single entrant.

    Parameters
    ----------
    player: dict
        The entrant whose SPR to calculate

    Returns
    -------
    int
        The entrant's SPR
    """

    seed = player["seed"]
    placing = player["placing"]
    return calculateSetsFromWinning(seed) - calculateSetsFromWinning(placing)


def determineBetterPlacing(placing1: list, placing2: list):
    """
    Determine the better placing of the two provided.

    Parameters
    ----------
    Both parameters are lists with two ints in the format of `[event id of placing, placing]`

    placing1: list
        The first placing
    placing2: list
        The second placing

    Returns
    -------
    list
        The better placing of the two provided
    """

    if placing1[1] < placing2[1]:
        return placing1
    else:
        event1 = Event()
        event1.load_event(placing1[0])
        event2 = Event()
        event2.load_event(placing2[0])
        if placing1[1] == placing2[1] and event1.entrants > event2.entrants:
            return placing1
        else:
            return placing2


def calculateUF(winner, loser):
    """
    Calculate the upset factor of an entrant winning against another entrant.

    Parameters
    ----------
    winner: dict
        The winner of the set
    loser: dict
        The loser of the set

    Returns
    -------
    int
        The upset factor of the set
    """

    winnerSeed = winner["seed"]
    loserSeed = loser["seed"]
    return calculateSetsFromWinning(winnerSeed) - calculateSetsFromWinning(loserSeed)


def getScores(displayScore, winnerName, loserName):
    """
    Retrieve the numerical scores of the winner and loser of a set given its display score.

    Parameters
    ----------
    displayScore: str
        The display score of the set as generated by start.gg
    winnerName: str
        The name of the winner (team and vertical bar included if applicable)
    loserName: str
        The name of the loser (team and vertical bar included if applicable)

    Returns
    -------
    int
        The winner's score
    int
        The loser's score
    """

    winnerScoreIndex = displayScore.index(winnerName) + len(winnerName) + 1
    loserScoreIndex = displayScore.index(loserName) + len(loserName) + 1
    if displayScore[winnerScoreIndex] == "W":
        winnerScore = 3
        loserScore = 0
    else:
        winnerScore = int(displayScore[winnerScoreIndex])
        loserScore = int(displayScore[loserScoreIndex])
    return winnerScore, loserScore


def calculateSetsFromWinning(position):
    """
    Calculate how many sets a player was from winning an event given their placing or seed.

    Parameters
    ----------
    position: int
        The placing or seed of a player

    Returns
    -------
    int
        The number of sets away from winning an event
    """

    placings = [1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96]
    for i in range(len(placings)):
        if position <= placings[i]:
            return i
    return len(placings)


def calculateDemonAndBlessing(winningSets, losingSets):
    """
    Determine a player's bracket demon and blessing given the sets they have won and lost.

    Parameters
    ----------
    winningSets: list
        Rows in the database's `sets` table that the player has won
    losingSets: list
        Rows in the database's `sets` table that the player has lost

    Returns
    -------
    Both return values are lists in the format of `[opponent name, # of wins against, # of losses against]`

    list
        The information for the player's bracket demon
    list
        The information for the player's bracket blessing
    """

    records = {}
    # dict of length 2 arrays
    # example entry: opponent_id: [numWins, numLosses]
    for set in winningSets:
        loser_id = set[3]  # id of opponent
        if records.get(loser_id) is None:
            records[loser_id] = [1, 0]
        else:
            records[loser_id][0] += 1

    for set in losingSets:
        winner_id = set[2]  # id of opponent
        if records.get(winner_id) is None:
            records[winner_id] = [0, 1]
        else:
            records[winner_id][1] += 1

    demon = [-1, 0, 0]
    demonScore = 1.0
    # make default winrate against demon 100% so that it's practically
    # impossible for this to end up as the returned demon value
    blessing = [-1, 0, 0]
    blessingScore = 0.0
    # same logic but 0% winrate
    for opponent_id in records.keys():
        record = records[opponent_id]
        """
        THE PROBLEM:
        It's hard to say whether an 21-13 record against opponent 1 is
           better or worse than a 5-3 record against opponent 2
        It's 61.8% vs 62.5%, but the total number of sets is too low for
           such a minor difference to be the end all be all
        If opponent 1 wins their next set, the winrate drops to 60.0%
           but if opponent 2 wins their next set, the winrate drops to 55.5%
        This issue is much more apparent when comparing something like
           a 2-0 record vs a 19-1 record, where the 2-0 comes out on top
        
        THE SOLUTION (a trick I learned online):
        Add 1 win and 1 loss to each record, and compare *those* records
        For our first example, it would now be 22-14 vs 6-4, which is
           61.1% vs 60.0%, so the 21-13 record is better
        For our second example, it would now be 3-1 vs 20-2, which is
           75.0% vs 90.9%, so the 19-1 record is better
        """

        score = 1.0 * (record[0] + 1) / (record[0] + record[1] + 2)
        if score < demonScore:
            demonScore = score
            demon = [opponent_id, record[0], record[1]]
        if score > blessingScore:
            blessingScore = score
            blessing = [opponent_id, record[0], record[1]]
    return demon, blessing
